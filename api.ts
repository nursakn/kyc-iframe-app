/* tslint:disable */
/* eslint-disable */
/**
 * KycService.Pages.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthenticationDetailsModel
 */
export interface AuthenticationDetailsModel {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationDetailsModel
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationDetailsModel
     */
    'url'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateIdentificationRequestByDraftResponse
 */
export interface CreateIdentificationRequestByDraftResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateIdentificationRequestByDraftResponse
     */
    'identificationRequestId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateIdentificationRequestByDraftResponse
     */
    'externalIdentificationRequestId'?: string | null;
    /**
     * 
     * @type {AuthenticationDetailsModel}
     * @memberof CreateIdentificationRequestByDraftResponse
     */
    'authenticationDetails'?: AuthenticationDetailsModel;
}
/**
 * 
 * @export
 * @interface CreateIdentificationRequestDocumentFieldModel
 */
export interface CreateIdentificationRequestDocumentFieldModel {
    /**
     * 
     * @type {string}
     * @memberof CreateIdentificationRequestDocumentFieldModel
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateIdentificationRequestDocumentFieldModel
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateIdentificationRequestDocumentRequest
 */
export interface CreateIdentificationRequestDocumentRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateIdentificationRequestDocumentRequest
     */
    'type'?: string | null;
    /**
     * 
     * @type {Array<CreateIdentificationRequestDocumentFieldModel>}
     * @memberof CreateIdentificationRequestDocumentRequest
     */
    'fields'?: Array<CreateIdentificationRequestDocumentFieldModel> | null;
}
/**
 * 
 * @export
 * @interface CreateIdentificationRequestDraftResponse
 */
export interface CreateIdentificationRequestDraftResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateIdentificationRequestDraftResponse
     */
    'identificationRequestDraftId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateIdentificationRequestDraftResponse
     */
    'identificationMethodId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateIdentificationRequestDraftResponse
     */
    'requiredDocumentTypes'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface GetAvailablePartnerIdentificationMethodListItem
 */
export interface GetAvailablePartnerIdentificationMethodListItem {
    /**
     * 
     * @type {string}
     * @memberof GetAvailablePartnerIdentificationMethodListItem
     */
    'identificationMethodId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAvailablePartnerIdentificationMethodListItem
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetAvailablePartnerIdentificationMethodListItem
     */
    'logoUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface GetIdentificationRequestDraftDocumentListItem
 */
export interface GetIdentificationRequestDraftDocumentListItem {
    /**
     * 
     * @type {string}
     * @memberof GetIdentificationRequestDraftDocumentListItem
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetIdentificationRequestDraftDocumentListItem
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface GetIdentificationRequestDraftResultResponse
 */
export interface GetIdentificationRequestDraftResultResponse {
    /**
     * 
     * @type {string}
     * @memberof GetIdentificationRequestDraftResultResponse
     */
    'identificationRequestDraftId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetIdentificationRequestDraftResultResponse
     */
    'identificationMethodId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetIdentificationRequestDraftResultResponse
     */
    'status'?: string | null;
    /**
     * 
     * @type {AuthenticationDetailsModel}
     * @memberof GetIdentificationRequestDraftResultResponse
     */
    'authenticationDetails'?: AuthenticationDetailsModel;
    /**
     * 
     * @type {string}
     * @memberof GetIdentificationRequestDraftResultResponse
     */
    'successUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetIdentificationRequestDraftResultResponse
     */
    'failUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}

/**
 * IdentificationMethodApi - axios parameter creator
 * @export
 */
export const IdentificationMethodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} identificationToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationMethodsPost: async (identificationToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationToken' is not null or undefined
            assertParamExists('apiIdentificationMethodsPost', 'identificationToken', identificationToken)
            const localVarPath = `/api/identification-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (identificationToken != null) {
                localVarHeaderParameter['identificationToken'] = String(identificationToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentificationMethodApi - functional programming interface
 * @export
 */
export const IdentificationMethodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdentificationMethodApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} identificationToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentificationMethodsPost(identificationToken: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAvailablePartnerIdentificationMethodListItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentificationMethodsPost(identificationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdentificationMethodApi - factory interface
 * @export
 */
export const IdentificationMethodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdentificationMethodApiFp(configuration)
    return {
        /**
         * 
         * @param {string} identificationToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationMethodsPost(identificationToken: string, options?: any): AxiosPromise<Array<GetAvailablePartnerIdentificationMethodListItem>> {
            return localVarFp.apiIdentificationMethodsPost(identificationToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdentificationMethodApi - object-oriented interface
 * @export
 * @class IdentificationMethodApi
 * @extends {BaseAPI}
 */
export class IdentificationMethodApi extends BaseAPI {
    /**
     * 
     * @param {string} identificationToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationMethodApi
     */
    public apiIdentificationMethodsPost(identificationToken: string, options?: AxiosRequestConfig) {
        return IdentificationMethodApiFp(this.configuration).apiIdentificationMethodsPost(identificationToken, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IdentificationRequestDraftApi - axios parameter creator
 * @export
 */
export const IdentificationRequestDraftApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} identificationToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationRequestDraftCheckResultGet: async (identificationToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationToken' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftCheckResultGet', 'identificationToken', identificationToken)
            const localVarPath = `/api/identification-request-draft/check-result`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (identificationToken != null) {
                localVarHeaderParameter['identificationToken'] = String(identificationToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationRequestDraftId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationRequestDraftCreateIdentificationRequestIdentificationRequestDraftIdPost: async (identificationToken: string, identificationRequestDraftId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationToken' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftCreateIdentificationRequestIdentificationRequestDraftIdPost', 'identificationToken', identificationToken)
            // verify required parameter 'identificationRequestDraftId' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftCreateIdentificationRequestIdentificationRequestDraftIdPost', 'identificationRequestDraftId', identificationRequestDraftId)
            const localVarPath = `/api/identification-request-draft/create-identification-request/{identificationRequestDraftId}`
                .replace(`{${"identificationRequestDraftId"}}`, encodeURIComponent(String(identificationRequestDraftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (identificationToken != null) {
                localVarHeaderParameter['identificationToken'] = String(identificationToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationMethodId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationRequestDraftPost: async (identificationToken: string, identificationMethodId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationToken' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftPost', 'identificationToken', identificationToken)
            // verify required parameter 'identificationMethodId' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftPost', 'identificationMethodId', identificationMethodId)
            const localVarPath = `/api/identification-request-draft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (identificationMethodId !== undefined) {
                localVarQueryParameter['identificationMethodId'] = identificationMethodId;
            }

            if (identificationToken != null) {
                localVarHeaderParameter['identificationToken'] = String(identificationToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentificationRequestDraftApi - functional programming interface
 * @export
 */
export const IdentificationRequestDraftApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdentificationRequestDraftApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} identificationToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentificationRequestDraftCheckResultGet(identificationToken: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIdentificationRequestDraftResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentificationRequestDraftCheckResultGet(identificationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationRequestDraftId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentificationRequestDraftCreateIdentificationRequestIdentificationRequestDraftIdPost(identificationToken: string, identificationRequestDraftId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIdentificationRequestByDraftResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentificationRequestDraftCreateIdentificationRequestIdentificationRequestDraftIdPost(identificationToken, identificationRequestDraftId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationMethodId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentificationRequestDraftPost(identificationToken: string, identificationMethodId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIdentificationRequestDraftResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentificationRequestDraftPost(identificationToken, identificationMethodId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdentificationRequestDraftApi - factory interface
 * @export
 */
export const IdentificationRequestDraftApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdentificationRequestDraftApiFp(configuration)
    return {
        /**
         * 
         * @param {string} identificationToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationRequestDraftCheckResultGet(identificationToken: string, options?: any): AxiosPromise<GetIdentificationRequestDraftResultResponse> {
            return localVarFp.apiIdentificationRequestDraftCheckResultGet(identificationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationRequestDraftId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationRequestDraftCreateIdentificationRequestIdentificationRequestDraftIdPost(identificationToken: string, identificationRequestDraftId: string, options?: any): AxiosPromise<CreateIdentificationRequestByDraftResponse> {
            return localVarFp.apiIdentificationRequestDraftCreateIdentificationRequestIdentificationRequestDraftIdPost(identificationToken, identificationRequestDraftId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationMethodId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationRequestDraftPost(identificationToken: string, identificationMethodId: string, options?: any): AxiosPromise<CreateIdentificationRequestDraftResponse> {
            return localVarFp.apiIdentificationRequestDraftPost(identificationToken, identificationMethodId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdentificationRequestDraftApi - object-oriented interface
 * @export
 * @class IdentificationRequestDraftApi
 * @extends {BaseAPI}
 */
export class IdentificationRequestDraftApi extends BaseAPI {
    /**
     * 
     * @param {string} identificationToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationRequestDraftApi
     */
    public apiIdentificationRequestDraftCheckResultGet(identificationToken: string, options?: AxiosRequestConfig) {
        return IdentificationRequestDraftApiFp(this.configuration).apiIdentificationRequestDraftCheckResultGet(identificationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} identificationToken 
     * @param {string} identificationRequestDraftId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationRequestDraftApi
     */
    public apiIdentificationRequestDraftCreateIdentificationRequestIdentificationRequestDraftIdPost(identificationToken: string, identificationRequestDraftId: string, options?: AxiosRequestConfig) {
        return IdentificationRequestDraftApiFp(this.configuration).apiIdentificationRequestDraftCreateIdentificationRequestIdentificationRequestDraftIdPost(identificationToken, identificationRequestDraftId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} identificationToken 
     * @param {string} identificationMethodId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationRequestDraftApi
     */
    public apiIdentificationRequestDraftPost(identificationToken: string, identificationMethodId: string, options?: AxiosRequestConfig) {
        return IdentificationRequestDraftApiFp(this.configuration).apiIdentificationRequestDraftPost(identificationToken, identificationMethodId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IdentificationRequestDraftDocumentApi - axios parameter creator
 * @export
 */
export const IdentificationRequestDraftDocumentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationRequestDraftId 
         * @param {CreateIdentificationRequestDocumentRequest} createIdentificationRequestDocumentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentPost: async (identificationToken: string, identificationRequestDraftId: string, createIdentificationRequestDocumentRequest: CreateIdentificationRequestDocumentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationToken' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentPost', 'identificationToken', identificationToken)
            // verify required parameter 'identificationRequestDraftId' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentPost', 'identificationRequestDraftId', identificationRequestDraftId)
            // verify required parameter 'createIdentificationRequestDocumentRequest' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentPost', 'createIdentificationRequestDocumentRequest', createIdentificationRequestDocumentRequest)
            const localVarPath = `/api/identification-request-draft/{identificationRequestDraftId}/add-document`
                .replace(`{${"identificationRequestDraftId"}}`, encodeURIComponent(String(identificationRequestDraftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (identificationToken != null) {
                localVarHeaderParameter['identificationToken'] = String(identificationToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIdentificationRequestDocumentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationRequestDraftId 
         * @param {string} documentId 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentScanDocumentIdPost: async (identificationToken: string, identificationRequestDraftId: string, documentId: string, files?: Array<File>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationToken' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentScanDocumentIdPost', 'identificationToken', identificationToken)
            // verify required parameter 'identificationRequestDraftId' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentScanDocumentIdPost', 'identificationRequestDraftId', identificationRequestDraftId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentScanDocumentIdPost', 'documentId', documentId)
            const localVarPath = `/api/identification-request-draft/{identificationRequestDraftId}/add-document-scan/{documentId}`
                .replace(`{${"identificationRequestDraftId"}}`, encodeURIComponent(String(identificationRequestDraftId)))
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (identificationToken != null) {
                localVarHeaderParameter['identificationToken'] = String(identificationToken);
            }

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationRequestDraftId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationRequestDraftIdentificationRequestDraftIdDeleteDocumentDocumentIdDelete: async (identificationToken: string, identificationRequestDraftId: string, documentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationToken' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftIdentificationRequestDraftIdDeleteDocumentDocumentIdDelete', 'identificationToken', identificationToken)
            // verify required parameter 'identificationRequestDraftId' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftIdentificationRequestDraftIdDeleteDocumentDocumentIdDelete', 'identificationRequestDraftId', identificationRequestDraftId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftIdentificationRequestDraftIdDeleteDocumentDocumentIdDelete', 'documentId', documentId)
            const localVarPath = `/api/identification-request-draft/{identificationRequestDraftId}/delete-document/{documentId}`
                .replace(`{${"identificationRequestDraftId"}}`, encodeURIComponent(String(identificationRequestDraftId)))
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (identificationToken != null) {
                localVarHeaderParameter['identificationToken'] = String(identificationToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationRequestDraftId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationRequestDraftIdentificationRequestDraftIdDocumentsGet: async (identificationToken: string, identificationRequestDraftId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationToken' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftIdentificationRequestDraftIdDocumentsGet', 'identificationToken', identificationToken)
            // verify required parameter 'identificationRequestDraftId' is not null or undefined
            assertParamExists('apiIdentificationRequestDraftIdentificationRequestDraftIdDocumentsGet', 'identificationRequestDraftId', identificationRequestDraftId)
            const localVarPath = `/api/identification-request-draft/{identificationRequestDraftId}/documents`
                .replace(`{${"identificationRequestDraftId"}}`, encodeURIComponent(String(identificationRequestDraftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (identificationToken != null) {
                localVarHeaderParameter['identificationToken'] = String(identificationToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentificationRequestDraftDocumentApi - functional programming interface
 * @export
 */
export const IdentificationRequestDraftDocumentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdentificationRequestDraftDocumentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationRequestDraftId 
         * @param {CreateIdentificationRequestDocumentRequest} createIdentificationRequestDocumentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentPost(identificationToken: string, identificationRequestDraftId: string, createIdentificationRequestDocumentRequest: CreateIdentificationRequestDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentPost(identificationToken, identificationRequestDraftId, createIdentificationRequestDocumentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationRequestDraftId 
         * @param {string} documentId 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentScanDocumentIdPost(identificationToken: string, identificationRequestDraftId: string, documentId: string, files?: Array<File>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentScanDocumentIdPost(identificationToken, identificationRequestDraftId, documentId, files, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationRequestDraftId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentificationRequestDraftIdentificationRequestDraftIdDeleteDocumentDocumentIdDelete(identificationToken: string, identificationRequestDraftId: string, documentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentificationRequestDraftIdentificationRequestDraftIdDeleteDocumentDocumentIdDelete(identificationToken, identificationRequestDraftId, documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationRequestDraftId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentificationRequestDraftIdentificationRequestDraftIdDocumentsGet(identificationToken: string, identificationRequestDraftId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetIdentificationRequestDraftDocumentListItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentificationRequestDraftIdentificationRequestDraftIdDocumentsGet(identificationToken, identificationRequestDraftId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdentificationRequestDraftDocumentApi - factory interface
 * @export
 */
export const IdentificationRequestDraftDocumentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdentificationRequestDraftDocumentApiFp(configuration)
    return {
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationRequestDraftId 
         * @param {CreateIdentificationRequestDocumentRequest} createIdentificationRequestDocumentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentPost(identificationToken: string, identificationRequestDraftId: string, createIdentificationRequestDocumentRequest: CreateIdentificationRequestDocumentRequest, options?: any): AxiosPromise<string> {
            return localVarFp.apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentPost(identificationToken, identificationRequestDraftId, createIdentificationRequestDocumentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationRequestDraftId 
         * @param {string} documentId 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentScanDocumentIdPost(identificationToken: string, identificationRequestDraftId: string, documentId: string, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentScanDocumentIdPost(identificationToken, identificationRequestDraftId, documentId, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationRequestDraftId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationRequestDraftIdentificationRequestDraftIdDeleteDocumentDocumentIdDelete(identificationToken: string, identificationRequestDraftId: string, documentId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiIdentificationRequestDraftIdentificationRequestDraftIdDeleteDocumentDocumentIdDelete(identificationToken, identificationRequestDraftId, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} identificationToken 
         * @param {string} identificationRequestDraftId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentificationRequestDraftIdentificationRequestDraftIdDocumentsGet(identificationToken: string, identificationRequestDraftId: string, options?: any): AxiosPromise<Array<GetIdentificationRequestDraftDocumentListItem>> {
            return localVarFp.apiIdentificationRequestDraftIdentificationRequestDraftIdDocumentsGet(identificationToken, identificationRequestDraftId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdentificationRequestDraftDocumentApi - object-oriented interface
 * @export
 * @class IdentificationRequestDraftDocumentApi
 * @extends {BaseAPI}
 */
export class IdentificationRequestDraftDocumentApi extends BaseAPI {
    /**
     * 
     * @param {string} identificationToken 
     * @param {string} identificationRequestDraftId 
     * @param {CreateIdentificationRequestDocumentRequest} createIdentificationRequestDocumentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationRequestDraftDocumentApi
     */
    public apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentPost(identificationToken: string, identificationRequestDraftId: string, createIdentificationRequestDocumentRequest: CreateIdentificationRequestDocumentRequest, options?: AxiosRequestConfig) {
        return IdentificationRequestDraftDocumentApiFp(this.configuration).apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentPost(identificationToken, identificationRequestDraftId, createIdentificationRequestDocumentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} identificationToken 
     * @param {string} identificationRequestDraftId 
     * @param {string} documentId 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationRequestDraftDocumentApi
     */
    public apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentScanDocumentIdPost(identificationToken: string, identificationRequestDraftId: string, documentId: string, files?: Array<File>, options?: AxiosRequestConfig) {
        return IdentificationRequestDraftDocumentApiFp(this.configuration).apiIdentificationRequestDraftIdentificationRequestDraftIdAddDocumentScanDocumentIdPost(identificationToken, identificationRequestDraftId, documentId, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} identificationToken 
     * @param {string} identificationRequestDraftId 
     * @param {string} documentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationRequestDraftDocumentApi
     */
    public apiIdentificationRequestDraftIdentificationRequestDraftIdDeleteDocumentDocumentIdDelete(identificationToken: string, identificationRequestDraftId: string, documentId: string, options?: AxiosRequestConfig) {
        return IdentificationRequestDraftDocumentApiFp(this.configuration).apiIdentificationRequestDraftIdentificationRequestDraftIdDeleteDocumentDocumentIdDelete(identificationToken, identificationRequestDraftId, documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} identificationToken 
     * @param {string} identificationRequestDraftId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationRequestDraftDocumentApi
     */
    public apiIdentificationRequestDraftIdentificationRequestDraftIdDocumentsGet(identificationToken: string, identificationRequestDraftId: string, options?: AxiosRequestConfig) {
        return IdentificationRequestDraftDocumentApiFp(this.configuration).apiIdentificationRequestDraftIdentificationRequestDraftIdDocumentsGet(identificationToken, identificationRequestDraftId, options).then((request) => request(this.axios, this.basePath));
    }
}


